// Copyright Kani Contributors
// SPDX-License-Identifier: Apache-2.0 OR MIT
import * as vscode from 'vscode';

import { SourceCodeParser } from './sourceCodeParser';

/**
 * CodelensProvider
 */
export class CodelensProvider implements vscode.CodeLensProvider {
	private codeLenses: vscode.CodeLens[] = [];
	private regex: RegExp;
	private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();
	public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event;

	constructor() {
		this.regex = /kani_concrete_playback/g;

		vscode.workspace.onDidChangeConfiguration((_) => {
			this._onDidChangeCodeLenses.fire();
		});
	}

	/**
	 * Extends the provideCodeLenses function provided by CodeLens and adds Kani generated unit tests to their lists
	 *
	 * @param document - Takes in the current file and provides the codelens button
	 * @param _token - Unused token
	 * @returns
	 */

	public async provideCodeLenses(
		document: vscode.TextDocument,
		_token: vscode.CancellationToken,
	): Promise<any> {
		if (vscode.workspace.getConfiguration('codelens-sample').get('enableCodeLens', true)) {
			this.codeLenses = [];
			const text = document.getText();

			// Find the unit tests by searching for its text
			const kani_concrete_tests = await SourceCodeParser.extractKaniTestMetadata(text);

			for (const item of kani_concrete_tests) {
				const function_item_name = item.at(0);

				if (function_item_name === undefined) {
					return [];
				}

				const startPosition = item.at(1);

				// This is the metadata that VSCode needs to place the codelens button
				const line = document.lineAt(startPosition.row);
				const indexOf = line.text.indexOf(function_item_name);
				const position = new vscode.Position(line.lineNumber, indexOf);
				const range = document.getWordRangeAtPosition(position, new RegExp(this.regex));

				const runTestAction = {
					title: '$(play) Run Test (Kani)',
					tooltip: 'Run unit test generated by Kani',
					command: 'codelens-sample.codelensAction',
					arguments: [function_item_name],
				};

				const debugTestAction = {
					title: '$(debug) Debug Harness (Kani)',
					tooltip: 'Debug unit test generated by Kani',
					command: 'extension.connectToDebugger',
					arguments: [function_item_name],
				};

				if (range) {
					const runTestCodelens = new vscode.CodeLens(range, runTestAction);
					const debugTestCodelens = new vscode.CodeLens(range, debugTestAction);

					this.codeLenses.push(runTestCodelens);
					this.codeLenses.push(debugTestCodelens);
				}
			}
			return this.codeLenses;
		}

		return [];
	}

	public resolveCodeLens(codeLens: vscode.CodeLens): vscode.ProviderResult<vscode.CodeLens> {
		return codeLens;
	}
}
